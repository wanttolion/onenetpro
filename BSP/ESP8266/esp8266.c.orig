#include "esp8266.h"

u8 recv_data[MAX_LEN];
u8 recv_len = 0;
//使用中断接收
void uart2_config(void)
{
	//定义结构体
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	
	//开启外设时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

	//引脚配置
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
	
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
	
	//串口参数配置
	USART_InitStruct.USART_BaudRate = USART2_BAUD;
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_InitStruct.USART_Parity = USART_Parity_No;
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART2, &USART_InitStruct);
	
	//使能串口中断
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 2;
	NVIC_Init(&NVIC_InitStruct);
	
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
	USART_Cmd(USART2, ENABLE);
}


void usart2_sendstring(USART_TypeDef * pUSARTx, u8 *str)
{
	unsigned int k=0;
    do 
    {
        USART_SendData( pUSARTx, *(str + k) );
        k++;
    } while(*(str + k)!='\0');
  
    /* 等待发送完成 */
    while(USART_GetFlagStatus(pUSARTx,USART_FLAG_TC)==RESET);
    
}

void delay_nms(u16 time)
{ 
u16 i=0; 
while(time--)
{
i=12000; //????
while(i--) ; 
}
}

void wifi_config(void)
{
	u8 test[5] = "AT\r\n";
	//test
	usart2_sendstring(USART2, test);
	
	if(recv_len != 0){
		ILI9341_DispStringLine_EN(LINE(3), (char *)recv_data);
	}
	
}


void esp8266_init(void)
{
	//串口初始化
	uart2_config();
	//利用AT指令配置wifi模块
	wifi_config();
	
}

